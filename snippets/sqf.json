{
    "xor": {
        "prefix": "xor",
        "body": [
            "((${1:A} || ${2:B}) && !(${1:A} && ${2:B}))$0"
        ],
        "description": "((A || B) && !(A && B))"
    },
    "nor": {
        "prefix": "nor",
        "body": [
            "!(${1:A} || ${2:B})$0"
        ],
        "description": "!(A || B)"
    },
    "nand": {
        "prefix": "nand",
        "body": [
            "!(${1:A} && ${2:B})$0"
        ],
        "description": "!(A && B)"
    },

    "if": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) then {${2:true}}$0"
        ],
        "description": "if (...) then {...}"
    },
    "if-array": {
        "prefix": "ifarray",
        "body": [
            "if (${1:condition}) then [{${2:true}}, {${3:false}}]$0"
        ],
        "description": "if (...) then [{...}, {...}]"
    },
    "if-else": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) then {${2:true}} else {${3:false}}$0"
        ],
        "description": "if (...) then {...} else {...}"
    },
    "if-exit": {
        "prefix": "ifexit",
        "body": [
            "if (${1:condition}) exitWith {${2:code}}$0"
        ],
        "description": "if (...) exitWith {...}"
    },
    "if-return": {
        "prefix": "ifreturn",
        "body": [
            "if (${1:condition}) then {_fnc_scriptName breakOut ${2:value}}$0"
        ],
        "description": "if (...) then {return}"
    },
    "if-throw": {
        "prefix": "ifthrow",
        "body": [
            "if (${1:condition}) throw [__FILE__, __LINE__, \"${2:exception}\"]$0"
        ],
        "description": "if (...) throw ...;"
    },
    "else": {
        "prefix": "else",
        "body": ["else {${1:false}}$0"],
        "description": "else {...}"
    },

    "for": {
        "prefix": "for",
        "body": [
            "for \"_${1:i}\" from ${2:A} to ${3:B} do {${4:code}}$0"
        ],
        "description": "for \"_i\" from A to B do {...}"
    },
    "for-step": {
        "prefix": "forstep",
        "body": [
            "for \"_${1:i}\" from ${2:A} to ${3:B} step ${4:1} do {${5:code}}$0"
        ],
        "description": "for \"_i\" from A to B step C do {...}"
    },
    "for-spec": {
        "prefix": [
            "forc",
            "forarray"
        ],
        "body": [
            "for [{${3:private _${1:i} = ${2:A}}}, {${5:_${1:i} < ${4:B}}}, {${7:_${1:i} = _${1:i} ${6:+ 1}}}] do {${8:code}}$0"
        ],
        "description": "for [{...}, {...}, {...}] do {...}"
    },
    "for-each": {
        "prefix": "forEach",
        "body": [
            "{${2:code}} forEach ${1:Array}$0"
        ]
    },

    "while": {
        "prefix": "while",
        "body": [
            "while {${1:condition}} do {${2:code}}$0"
        ],
        "description": "while {...} do {...}"
    },
    "do-while": {
        "prefix": "do while",
        "body": [
            "${1:code}; while {${2:condition}} do {${1:code}}$0"
        ],
        "description": "do {...} while (...)"
    },

    "switch": {
        "prefix": "switch",
        "body": [
            "switch (${1:condition}) do {${2:cases}}$0"
        ],
        "description": "switch (...) do {...}"
    },
    "case": {
        "prefix": "case",
        "body": [
            "case (${1:value}): {${2:code}}$0"
        ],
        "description": "case A: {...}"
    },
    "case-plain": {
        "prefix": "case",
        "body": [
            "case (${1:value})$0"
        ],
        "description": "case A"
    },
    "default": {
        "prefix": "default",
        "body": [
            "default {${1:code}}$0"
        ],
        "description": "default {...}"
    },

    "with": {
        "prefix": "with",
        "body": [
            "with ${1:namespace} do {${2:code}}$0"
        ],
        "description": "with namespace do {...};"
    },

    "set-variable": {
        "prefix": "setVar",
        "body": [
            "${1:namespace} setVariable [${2:VarName}, ${3:value}];$0"
        ],
        "description": "namespace setVariable [name, value]"
    },
    "set-variable-share": {
        "prefix": "setVarShare",
        "body": [
            "${1:namespace} setVariable [${2:VarName}, ${3:value}, ${4:share}];$0"
        ],
        "description": "namespace setVariable [name, value, global]"
    },
    "get-variable": {
        "prefix": "getVar",
        "body": [
            "${1:namespace} getVariable ${2:VarName}$0"
        ],
        "description": "namespace getVariable name"
    },
    "get-variable-default": {
        "prefix": "getVarDefault",
        "body": [
            "${1:namespace} getVariable [${2:VarName}, ${3:defaultValue}]$0"
        ],
        "description": "namespace getVariable [name, default]"
    },

    "call": {
        "prefix": "call",
        "body": [
            "${1:arguments} call ${2:Func}$0"
        ],
        "description": "argv call func"
    },
    "spawn-code": {
        "prefix": "spawn",
        "body": [
            "${1:handle} = ${2:arguments} spawn {${3:code}}$0"
        ],
        "description": "handle = argv spawn {...}"
    },
    "spawn-fnc": {
        "prefix": "spawnFunction",
        "body": [
            "${1:handle} = ${2:arguments} spawn ${3:Func}$0"
        ],
        "description": "handle = argv spawn func"
    },
    "exec-sqf": {
        "prefix": "execVM",
        "body": [
            "${1:handle} = ${2:arguments} execVM \"${3:file}.sqf\"$0"
        ],
        "description": "handle = argv execVM \"file.sqf\";"
    },
    "exec-fsm": {
        "prefix": "execFSM",
        "body": [
            "${1:handle} = ${2:arguments} execFSM \"${3:file}.fsm\"$0"
        ],
        "description": "handle = argv execFSM \"file.fsm\"$0"
    },
    "exec-sqs": {
        "prefix": "exec",
        "body": [
            "${1:arguments} exec \"${2:file}.sqs\"$0"
        ],
        "description": "argv exec \"file.sqs\";"
    },

    "compile": {
        "prefix": "compile",
        "body": [
            "compileScript [\"${1:file}.sqf\", ${2:isFinal}, ${3:header}]$0"
        ],
        "description": "Compile file"
    },
    "compile-string": {
        "prefix": "compileString",
        "body": [
            "compile${1:Final} ${2:\"string\"}$0"
        ],
        "description": "Compile string"
    },

    "log": {
        "prefix": "log",
        "body": [
            "diag_log formatText [\"[LOG] %1(%2): %3\", __FILE__, __LINE__, ${1:\"message\"}]$0"
        ],
        "description": "Write message to .rpt-file"
    },
    "warning": {
        "prefix": "warning",
        "body": [
            "diag_log formatText [\"[WARNING] %1(%2): %3\", __FILE__, __LINE__, ${1:\"message\"}]$0"
        ],
        "description": "Write warning to .rpt-file"
    },
    "error": {
        "prefix": "error",
        "body": [
            "diag_log formatText [\"[ERROR] %1(%2): %3\", __FILE__, __LINE__, ${1:\"message\"}]; throw [__FILE__, __LINE__, ${2:errorcode}]$0"
        ],
        "description": "Write error to .rpt-file and throw exception"
    },
    "error-noexcept": {
        "prefix": "errorNoexcept",
        "body": [
            "diag_log formatText [\"[ERROR] %1(%2): %3\", __FILE__, __LINE__, ${1:\"message\"}]$0"
        ],
        "description": "Write error to .rpt-file"
    },
    "assert": {
        "prefix": "assert",
        "body": [
            "if not (${1:condition}) then {diag_log formatText [\"[ERROR] %1(%2): %3\", __FILE__, __LINE__, ${2:format [\"Assertion failed: %1\", {${1:condition}}}]]; throw [__FILE__, __LINE__, \"ASSERTION_FAILED\"]}$0"
        ],
        "description": "Check condition and throw exception if false"
    },
    "assert-noexcept": {
        "prefix": "assertNoexcept",
        "body": [
            "if not (${1:condition}) then {diag_log formatText [\"[ERROR] %1(%2): %3\", __FILE__, __LINE__, ${2:format [\"Assertion failed: %1\", {${1:condition}}}]]}$0"
        ],
        "description": "Assert condition and write error to log"
    },

    "return": {
        "prefix": "return",
        "body": [
            "${1:value} breakOut ${2:_fnc_scriptName}$0"
        ],
        "description": "Return value from function"
    },
    "exit": {
        "prefix": "exitWith",
        "body": [
            "if (${1:true}) exitWith {${2:value}}$0"
        ],
        "description": "Return value to parent scope"
    },

    "increment": {
        "prefix": "inc",
        "body": [
            "${1:A} = ${1:A} + 1$0"
        ],
        "description": "A = A + 1"
    },
    "decrement": {
        "prefix": "dec",
        "body": [
            "${1:A} = ${1:A} - 1$0"
        ],
        "description": "A = A - 1"
    },

    "compound-assignment-add": {
        "prefix": "add=",
        "body": [
            "${1:A} = ${1:A} + ${2:B}$0"
        ],
        "description": "A = A + B"
    },
    "compound-assignment-sub": {
        "prefix": "sub=",
        "body": [
            "${1:A} = ${1:A} - ${2:B}$0"
        ],
        "description": "A = A - B"
    },
    "compound-assignment-mul": {
        "prefix": "mul=",
        "body": [
            "${1:A} = ${1:A} * ${2:B}$0"
        ],
        "description": "A = A * B"
    },
    "compound-assignment-div": {
        "prefix": "div=",
        "body": [
            "${1:A} = ${1:A} / ${2:B}$0"
        ],
        "description": "A = A / B"
    },
    "compound-assignment-pow": {
        "prefix": "pow=",
        "body": [
            "${1:A} = ${1:A} ^ ${2:B}$0"
        ],
        "description": "A = A ^ B"
    },
    "compound-assignment-mod": {
        "prefix": "mod=",
        "body": [
            "${1:A} = ${1:A} % ${2:B}$0"
        ],
        "description": "A = A % B"
    },
    "compound-assignment-sqr": {
        "prefix": "sqr=",
        "body": [
            "${1:A} = ${1:A} ^ 2$0"
        ],
        "description": "A = A ^ 2"
    },

    "sqr": {
        "prefix": "sqr",
        "body": [
            "(${1:A} ^ 2)$0"
        ],
        "description": "(A ^ 2)"
    },

    "select": {
        "prefix": "select",
        "body": [
            "${1:array} select ${2:index}$0"
        ],
        "description": "ARRAY select INDEX"
    },
    "select-hash": {
        "prefix": [
            "selectHash",
            "hash"
        ],
        "body": [
            "${1:array} # ${2:index}$0"
        ],
        "description": "ARRAY # INDEX"
    },
    "select-bool": {
        "prefix": "selectBool",
        "body": [
            "[${3:false}, ${2:true}] select ${1:condition}$0"
        ],
        "description": "[B, A] select condition"
    },

    "try-catch": {
        "prefix": "try",
        "body": [
            "try {${1:tryCode}} catch {${2:catchCode}}$0"
        ],
        "description": "Execute code and catch exceptions"
    },
    "try-catch-func": {
        "prefix": "tryFunction",
        "body": [
            "${1:arguments} try ${2:code} catch {${3:catchCode}}$0"
        ],
        "description": "Execute code with params and catch exceptions"
    },

    "name-variable": {
        "prefix": [
            "variable"
        ],
        "body": [
            "${1:TAG}_${2:name}"
        ],
        "description": "Variable name"
    },
    "name-variable-quoted": {
        "prefix": [
            "qVariable",
            "varQuoted",
            "variableQuoted"
        ],
        "body": [
            "\"${1:TAG}_${2:name}\"$0"
        ],
        "description": "\"TAG_VariableName\""
    },
    "name-function": {
        "prefix": [
            "fnc",
            "function"
        ],
        "body": [
            "${1:TAG}_fnc_${2:name}"
        ],
        "description": "Function name"
    },
    "name-function-quoted": {
        "prefix": [
            "qfnc",
            "fncQuoted",
            "functionQuoted"
        ],
        "body": [
            "\"${1:TAG}_fnc_${2:name}\"$0"
        ],
        "description": "\"TAG_fnc_functionName\""
    },

    "include": {
        "prefix": "ppinclude",
        "body": [
            "#include \"${1:FILE}\"$0"
        ],
        "description": "#include \"FILE\""
    },
    "define": {
        "prefix": "ppdefine",
        "body": [
            "#define ${1:MACRO} $0"
        ],
        "description": "#define A"
    },
    "define-params": {
        "prefix": "ppdefineparams",
        "body": [
            "#define ${1:MACRO}($2) $0"
        ],
        "description": "#define A(B)"
    },
    "undefine": {
        "prefix": "ppundefine",
        "body": [
            "#undef ${1:MACRO}$0"
        ],
        "description": "#undef A"
    },
    "if-defined": {
        "prefix": "ppifdef",
        "body": [
            "#ifdef ${1:MACRO}$0"
        ],
        "description": "#ifdef ..."
    },
    "if-defined-block": {
        "prefix": "ppifdefblock",
        "body": [
            "#ifdef ${1:MACRO}",
            "$0",
            "#endif"
        ],
        "description": "#ifdef ... #endif"
    },
    "if-undefined": {
        "prefix": "ppifndef",
        "body": [
            "#ifndef ${1:MACRO}$0"
        ],
        "description": "#ifndef ..."
    },
    "if-undefined-block": {
        "prefix": "ppifndefblock",
        "body": [
            "#ifndef ${1:MACRO}",
            "$0",
            "#endif"
        ],
        "description": "#ifndef ... #endif"
    },
    "ppelse": {
        "prefix": "ppelse",
        "body": [
            "#else$0"
        ],
        "description": "#else"
    },

    "class": {
        "prefix": "class",
        "body": [
            "[$0",
            "\t[\"#type\", \"\"],",
            "\t[\"#base\", []],",
            "\t[\"#flags\", []],",
            "\t[\"#create\", {}],",
            "\t[\"#clone\", {}],",
            "\t[\"#delete\", {}],",
            "\t[\"#str\", {}]",
            "];"
        ],
        "description": "Create class definition for HashMap Object"
    }
}
